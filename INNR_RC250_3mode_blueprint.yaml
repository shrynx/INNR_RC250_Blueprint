#A blueprint for Home Assistant to use the INNR RC250 5 button remote
#By Allard Katan
#Modified to support multiple Zigbee integrations (ZHA, Zigbee2MQTT, deCONZ)
#Version 0.2, November 2024
#This blueprint is open source software distributed under the GPLV3 license

blueprint:
  domain: automation
  name: INNR RC250 remote 3 mode blueprint (Zigbee2MQTT)
  description: >-
    Blueprint that puts the INNR RC250 five button remote to use for different scenarios. It can either assign an action to each button press ('fixed mode'), cycle through a list of five scenes ('cycle mode'), or control color and brightness of one or more lights (color mode). Designed specifically for Zigbee2MQTT integration.
  author: Allard Katan (Modified for Zigbee2MQTT only)
  homeassistant:
    min_version: 2024.10.0
  input:
    action_type:
      name: Action type
      selector:
        select:
          multiple: false
          options:
            - label: Fixed action per button
              value: fix
            - label: Cycle scene activation
              value: cyc
            - label: Color or Color temperature and brightness of light(s)
              value: col
    remote_device_id:
      name: Remote device
      description: Select your INNR RC250 remote device. Look for a device with "RC250" in the name or model.
      selector:
        device:
          multiple: false
    input_helper:
      name: input helper
      selector:
        entity:
          filter:
            - domain: input_text
    light_target:
      name: Light(s) to affect
      default: []
      selector:
        entity:
          filter:
            - domain: light
          multiple: true
    fixed_section:
      name: Fixed action settings
      description: >-
        This is for always doing the same action for each individual button, regardless of the history. 
        Assign a scene to each button, use it to control a media player, anything you want. 
        Use your imagination!
      collapsed: true
      input:
        on_fixed:
          name: Action for 'On' press of center button
          default: []
          selector:
            action:
        off_fixed:
          name: Action for 'Off' press of center button
          default: []
          selector:
            action:
        up_fixed:
          name: Action to run when 'up' button is pressed
          default: []
          selector:
            action:
        down_fixed:
          name: Action to run when 'down' button is pressed
          default: []
          selector:
            action:
        left_fixed:
          name: Action to run when 'left' button is pressed
          default: []
          selector:
            action:
        right_fixed:
          name: Action to run when 'right' button is pressed
          default: []
          selector:
            action:
        long_up_fixed:
          name: Action to run when 'up' button is long-pressed (hold detection)
          default: []
          selector:
            action:
        long_down_fixed:
          name: Action to run when 'down' button is long-pressed (hold detection)
          default: []
          selector:
            action:
        long_updown_stop_fixed:
          name: Action to run when 'down' or 'up' button is released after long press
          default: []
          selector:
            action:  
        long_left_fixed:
          name: Action to run when 'left' button is long-pressed (hold detection)
          default: []
          selector:
            action:
        long_right_fixed:
          name: Action to run when 'right' button is long-pressed (hold detection)
          default: []
          selector:
            action:
        long_leftright_stop_fixed:
          name: Action to run when 'left' or 'right' button is released after long press
          default: []
          selector:
            action:    
    cyclic_5_section:
      name: 5 light scene cycle settings
      description: >-
        This is for cycling through 5 distinct scenes with the left-right buttons. 
        The scenes can contain any type of states you want, but for the up and down buttons, the blueprint is 
        only configured to increase or decrease the brightness of light entities
      collapsed: true
      input:
        cycle_scene1:
          name: Scene 1 in the list
          default: []
          selector:
            entity:
              filter:
                - domain: scene
        cycle_scene2:
          name: Scene 2 in the list
          default: []
          selector:
            entity:
              filter:
                - domain: scene
        cycle_scene3:
          name: Scene 3 in the list
          default: []
          selector:
            entity:
              filter:
                - domain: scene
        cycle_scene4:
          name: Scene 4 in the list
          default: []
          selector:
            entity:
              filter:
                - domain: scene
        cycle_scene5:
          name: Scene 5 in the list
          default: []
          selector:
            entity:
              filter:
                - domain: scene
        cycle_updown_percentage:
          name: percentage to change per click of the up-down buttons
          selector:
            number:
              min: 1
              max: 99
          default: 10
    color_section:
      name: Color mode settings
      description: >-
        This is only for lights, it allows you increase or decrease the brightness and/or color of the light(s)
      collapsed: true
      input:
        col_colortype:
          name: Type of color to change
          default: hsv
          selector:
            select:
              options:
                - label: full color (Hue/Saturation)
                  value: hsv
                - label: Color temperature and brightness
                  value: kelvin
        col_updown_percentage:
          name: percentage OF CURRENT VALUE to change per click of the up-down buttons
          selector:
            number:
              min: 1
              max: 99
          default: 10
        col_leftright_percentage:
          name: percentage OF MAXIMUM VALUE to change per click of the left-right buttons
          selector:
            number:
              min: 1
              max: 99
          default: 10

triggers:
  # Zigbee2MQTT Triggers
  - trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "on"
    id: on_press
    alias: on press on/off
  - trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "off"
    id: off_press
    alias: off press on/off
  - trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "step"
      step_mode: 0
    id: up_press
    alias: up press
  - trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "step"
      step_mode: 1
    id: down_press
    alias: down press
  - alias: left or right press
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "move_to_color_temp"
    id: leftright_press
  - alias: long press up
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "move"
      move_mode: 0
    id: long_up_press
  - alias: long press down
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "move"
      move_mode: 1
    id: long_down_press
  - alias: long press updown_stop
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "stop"
    id: long_updown_stop
  - alias: long press right
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "enhanced_move_hue"
      move_mode: 1
    id: long_right_press
  - alias: long press left
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "enhanced_move_hue"
      move_mode: 3
    id: long_left_press
  - alias: long press leftright_stop
    trigger: event
    event_type: zigbee2mqtt_device_event
    event_data:
      device_id: !input remote_device_id
      action: "stop_move_step"
    id: long_leftright_stop

conditions: []

variables:
  action_type: !input action_type
  input_helper: !input input_helper
  cycle_updown_percentage: !input cycle_updown_percentage
  col_updown_percentage: !input col_updown_percentage
  col_colortype: !input col_colortype
  light_target: !input light_target
  col_leftright_percentage: !input col_leftright_percentage
  
  # Event data extraction for Zigbee2MQTT
  leftright_value: "{{(trigger.event.data.color_temp_mireds|default(0))|int}}"
  
  last_leftright_value: "{{0 if (states(input_helper) is none or (not states(input_helper) is in ['200', '285', '370', '454', '588']))  else states(input_helper)}}" 
  
  #right: either we jumped from 588 to 200, or the number was less then it is now, but we did not jump from 200 to 588
  right_was_pressed: >-
      {{(trigger.id == 'leftright_press') and (
      (last_leftright_value == 588 and leftright_value == 200 ) or (
      last_leftright_value < leftright_value and not 
      (last_leftright_value==200 and leftright_value ==588))
      )}}
  
  left_was_pressed:
    "{{trigger.id == 'leftright_press' and not right_was_pressed}}"
    #all other cases with left right press are assigned to left

actions:
  - choose:
      # the actions for fixed button associations
      - conditions: "{{action_type == 'fix'}}"
        sequence:
          - choose:
              - conditions: "{{trigger.id == 'on_press'}}"
                sequence: !input on_fixed
              - conditions: "{{trigger.id == 'off_press'}}"
                sequence: !input off_fixed
              - conditions: "{{trigger.id == 'up_press'}}"
                sequence: !input up_fixed
              - conditions: "{{trigger.id == 'down_press'}}"
                sequence: !input down_fixed
              - conditions: "{{left_was_pressed}}"
                sequence: !input left_fixed
              - conditions: "{{right_was_pressed}}"
                sequence: !input right_fixed
              - conditions: "{{trigger.id == 'long_up_press'}}"
                sequence: !input long_up_fixed
              - conditions: "{{trigger.id == 'long_down_press'}}"
                sequence: !input long_down_fixed
              - conditions: "{{trigger.id == 'long_updown_stop'}}"
                sequence: !input long_updown_stop_fixed
              - conditions: "{{trigger.id == 'long_left_press'}}"
                sequence: !input long_left_fixed
              - conditions: "{{trigger.id == 'long_right_press'}}"
                sequence: !input long_right_fixed
              - conditions: "{{trigger.id == 'long_leftright_stop'}}"
                sequence: !input long_leftright_stop_fixed
      # the actions for cycling : 
      - conditions: "{{action_type == 'cyc'}}"
        sequence:
          - choose: #different triggers during cycling
              #on and off can be tricky if lights are turned on/off with other means as well
              #whether you use a 'toggle' or follow the button on/off, there will be unexpected behavior
              - conditions: "{{trigger.id == 'on_press'}}" #on presses, cycle scenes
                sequence:
                  - action: light.turn_on
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'off_press'}}" #off presses, cycle scenes
                sequence:
                  - action: light.turn_off
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'leftright_press'}}" #leftright presses, cycle scenes
                sequence:
                  - choose: #if cycling and leftright, choose action based on payload
                      - conditions: "{{leftright_value == 200}}"
                        sequence:
                          - action: scene.turn_on
                            target:
                              entity_id: !input cycle_scene1
                      - conditions: "{{leftright_value == 285}}"
                        sequence:
                          - action: scene.turn_on
                            target:
                              entity_id: !input cycle_scene2
                      - conditions: "{{leftright_value == 370}}"
                        sequence:
                          - action: scene.turn_on
                            target:
                              entity_id: !input cycle_scene3
                      - conditions: "{{leftright_value == 454}}"
                        sequence:
                          - action: scene.turn_on
                            target:
                              entity_id: !input cycle_scene4
                      - conditions: "{{leftright_value == 588}}"
                        sequence:
                          - action: scene.turn_on
                            target:
                              entity_id: !input cycle_scene5
              - conditions: "{{trigger.id == 'up_press'}}" #up presses, cycle scenes 
                sequence:
                  - action: light.turn_on
                    data:
                      brightness_step_pct: "{{cycle_updown_percentage|float}}"
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'down_press'}}" #down presses, cycle scenes
                sequence:
                  - action: light.turn_on
                    data:
                      brightness_step_pct: "{{0 - cycle_updown_percentage|float}}"
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'long_up_press'}}"
                sequence:
                  - parallel:
                    - repeat:
                        sequence:
                          - action: light.turn_on
                            data:
                              brightness_step_pct: "{{0.25 * cycle_updown_percentage|float}}"
                            target: 
                              entity_id: !input light_target
                          - delay:
                              milliseconds: 125
                        until: "{{repeat.index >= 40 or states(input_helper) == 'release_has_triggered' }}"
                    - sequence:
                        - wait_for_trigger:
                          - trigger: event
                            event_type: zigbee2mqtt_device_event
                            event_data:
                              device_id: !input remote_device_id
                              action: stop
                          timeout:
                            seconds: 5
                        - action: input_text.set_value
                          target:
                            entity_id: !input input_helper
                          data:
                            value: 'release_has_triggered'
                  - action: input_text.set_value
                    target:
                      entity_id: !input input_helper
                    data:
                      value: "{{last_leftright_value}}"
              - conditions: "{{trigger.id == 'long_down_press'}}"
                sequence:
                  - parallel:
                    - repeat:
                        sequence:
                          - action: light.turn_on
                            data:
                              brightness_step_pct: "{{0- 0.25 * cycle_updown_percentage|float}}"
                            target: 
                              entity_id: !input light_target
                          - delay:
                              milliseconds: 125
                        until: "{{repeat.index >= 40 or states(input_helper) == 'release_has_triggered' }}"
                    - sequence:
                        - wait_for_trigger:
                          - trigger: event
                            event_type: zigbee2mqtt_device_event
                            event_data:
                              device_id: !input remote_device_id
                              action: stop
                          timeout:
                            seconds: 5
                        - action: input_text.set_value
                          target:
                            entity_id: !input input_helper
                          data:
                            value: 'release_has_triggered'
                  - action: input_text.set_value
                    target:
                      entity_id: !input input_helper
                    data:
                      value: "{{last_leftright_value}}"
      #The actions for color/brightness control
      - conditions: "{{action_type == 'col'}}"
        sequence:
          - choose:
              - conditions: "{{trigger.id == 'on_press'}}" #on presses, col mode
                sequence:
                  - action: light.turn_on
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'off_press'}}" #off presses, col mode
                sequence:
                  - action: light.turn_off
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'up_press'}}" #up presses, col mode
                sequence:
                  - action: light.turn_on
                    data:
                      brightness_step_pct: "{{col_updown_percentage|int}}"
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'down_press'}}" #down presses, col mode
                sequence:
                  - action: light.turn_on
                    data:
                      brightness_step_pct: "{{0-col_updown_percentage|int}}"
                    target: 
                      entity_id: !input light_target
              - conditions: "{{trigger.id == 'leftright_press'}}"
                sequence:
                  - variables:
                      current_ct: "{{2202 if state_attr(light_target[0],'color_temp_kelvin') is none else state_attr(light_target[0],'color_temp_kelvin')|int }}" 
                      current_hue: "{{180 if state_attr(light_target[0],'hs_color') is none else state_attr(light_target[0],'hs_color')[0]|int }}"
                  - if:
                      - condition: template
                        value_template: "{{col_colortype == 'kelvin'}}"
                    then:
                      - variables:
                          difval: "{{col_leftright_percentage|int * 45 if right_was_pressed==true else 0 - col_leftright_percentage|int * 45 }}"
                      - action: light.turn_on
                        data:
                          color_temp_kelvin: "{{[(current_ct|int + difval), 6553]|min }}"
                        target: 
                          entity_id: !input light_target
                    else:
                      - variables:
                          difval: "{{col_leftright_percentage|int * 3.6 if right_was_pressed==true else 0 - col_leftright_percentage|int * 3.6 }}"
                      - action: light.turn_on
                        data:
                          hs_color: '{{ [(current_hue + difval) % 360, 100]}}'
                          #saturation = 100, calculate remainder to get rid of overshoots
                        target: 
                          entity_id: !input light_target
              - conditions: "{{trigger.id == 'long_up_press'}}"
                sequence:
                  - parallel:
                    - repeat:
                        sequence:
                          - action: light.turn_on
                            data:
                              brightness_step_pct: "{{0.25 * col_updown_percentage|float}}"
                            target: 
                              entity_id: !input light_target
                          - delay:
                              milliseconds: 125
                        until: "{{repeat.index >= 40 or states(input_helper) == 'release_has_triggered' }}"
                    - sequence:
                        - wait_for_trigger:
                          - trigger: event
                            event_type: zigbee2mqtt_device_event
                            event_data:
                              device_id: !input remote_device_id
                              action: stop
                          timeout:
                            seconds: 5
                        - action: input_text.set_value
                          target:
                            entity_id: !input input_helper
                          data:
                            value: 'release_has_triggered'
                  - action: input_text.set_value
                    target:
                      entity_id: !input input_helper
                    data:
                      value: "{{last_leftright_value}}"
              - conditions: "{{trigger.id == 'long_down_press'}}"
                sequence:
                  - parallel:
                    - repeat:
                        sequence:
                          - action: light.turn_on
                            data:
                              brightness_step_pct: "{{0- 0.25 * col_updown_percentage|float}}"
                            target: 
                              entity_id: !input light_target
                          - delay:
                              milliseconds: 125
                        until: "{{repeat.index >= 40 or states(input_helper) == 'release_has_triggered' }}"
                    - sequence:
                        - wait_for_trigger:
                          - trigger: event
                            event_type: zigbee2mqtt_device_event
                            event_data:
                              device_id: !input remote_device_id
                              action: stop
                          timeout:
                            seconds: 5
                        - action: input_text.set_value
                          target:
                            entity_id: !input input_helper
                          data:
                            value: 'release_has_triggered'
                  - action: input_text.set_value
                    target:
                      entity_id: !input input_helper
                    data:
                      value: "{{last_leftright_value}}"
              - conditions: "{{trigger.id in ['long_right_press', 'long_left_press']}}"
                sequence:
                  - parallel:
                    - sequence:
                      - variables:
                          current_ct: "{{2202 if state_attr(light_target[0],'color_temp_kelvin') is none else state_attr(light_target[0],'color_temp_kelvin')|float }}" 
                          current_hue: "{{180 if state_attr(light_target[0],'hs_color') is none else state_attr(light_target[0],'hs_color')[0]|float }}"
                          difval_abs: "{{col_leftright_percentage|float * 12 if col_colortype == 'kelvin' else col_leftright_percentage|float * 0.9 }}"
                          difval: "{{difval_abs if trigger.id == 'long_right_press' else 0 - difval_abs }}"
                      - repeat:
                          sequence:
                            - if:
                              - condition: template
                                value_template: "{{col_colortype == 'kelvin'}}"
                              then:
                                - action: light.turn_on
                                  data:
                                    color_temp_kelvin: "{{[[(current_ct + repeat.index*difval), 6553]|min, 2202]|max }}"
                                  target: 
                                    entity_id: !input light_target
                              else:
                                - action: light.turn_on
                                  data:
                                    hs_color: '{{ [(current_hue + repeat.index*difval) % 360, 100]}}'
                                    #saturation = 100, calculate remainder to get rid of overshoots
                                  target: 
                                    entity_id: !input light_target
                            - delay:
                                milliseconds: 125
                          until: "{{repeat.index >= 40 or states(input_helper) == 'release_has_triggered' }}"
                    - sequence:
                        - wait_for_trigger:
                          - trigger: event
                            event_type: zigbee2mqtt_device_event
                            event_data:
                              device_id: !input remote_device_id
                              action: stop_move_step
                          timeout:
                            seconds: 5
                        - action: input_text.set_value
                          target:
                            entity_id: !input input_helper
                          data:
                            value: 'release_has_triggered'
                  - action: input_text.set_value
                    target:
                      entity_id: !input input_helper
                    data:
                      value: "{{last_leftright_value}}"
  - if:
      - condition: trigger
        id: leftright_press
    then:
      - action: input_text.set_value
        target:
          entity_id: !input input_helper
        data:
          value: "{{leftright_value}}"
mode: queued
max: 5 